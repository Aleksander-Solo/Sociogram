@page "/question/{joinCode:int}/{nr:int}"
@using Microsoft.AspNetCore.Http.Extensions
@using Sociogram.DAL.Repositiores.Interfaces
@using Microsoft.AspNetCore.WebUtilities
@using Sociogram.UserInterface.Models
@inject IQuizService quizService
@inject NavigationManager navigationManager

<Card style="width: 489px; height: 380px; border: solid #57024e 2px; margin:auto; margin-top: 70px;"> 
    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" RenderMode="TabsRenderMode.LazyLoad">
    <Items>
        <Tab Name="step1" Width="Width.Is25">Pytanie 1</Tab>
        <Tab Name="step2" Width="Width.Is25">Pytanie 2</Tab>
        <Tab Name="step3" Width="Width.Is25">Pytanie 3</Tab>
        <Tab Name="step4" Width="Width.Is25">Koniec</Tab>
    </Items>
    <Content>
        <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
        <TabPanel Name="step1" style="margin: 7px; margin-top: 11px;">
            <h4>Pytanie 1</h4><hr />
            <p>Z kim najbardziej chciałbyś być w pokoju.</p>
            <Validation Validator="@ValidationRule.IsSelected">
            <Select TValue="int" Width="Width.Is75" SelectedValueChanged="@OnSelectedValueChanged1">
                <SelectItem Value="0">Wybierz osobe</SelectItem>
                @foreach(StudentViewModel student in Students)
                {
                    if (student.IsChosen)
                                {
                                    <SelectItem Value="@(student.Nr)"  Hidden>@(student.Name)</SelectItem>
                                }else{
                                    <SelectItem Value="@(student.Nr)">@(student.Name)</SelectItem>
                                } 
                }
            </Select>
            </Validation>
            <Button Color="Color.Primary" Clicked="Next1" style="float: right; margin: 5px; margin-top: 15px;">Następne pytanie</Button>
        </TabPanel>
        </Validations>
        <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
        <TabPanel Name="step2" style="margin: 7px; margin-top: 11px;">
            <h4>Pytanie 2</h4><hr />
            <p>Z kim najbardziej chciałbyś być w pokoju.</p>
            <Validation Validator="@ValidationRule.IsSelected">
            <Select TValue="int" Width="Width.Is75" SelectedValueChanged="@OnSelectedValueChanged2">
                <SelectItem Value="0">Wybierz osobe</SelectItem>
                @foreach(StudentViewModel student in Students)
                {
                                if (student.IsChosen)
                                {
                                    <SelectItem Value="@(student.Nr)"  Hidden>@(student.Name)</SelectItem>
                                }else{
                                    <SelectItem Value="@(student.Nr)">@(student.Name)</SelectItem>
                                }
                }
            </Select>
            </Validation>
            <Button Color="Color.Primary" Clicked="Next2" style="float: right; margin: 5px; margin-top: 15px;">Następne pytanie</Button>
        </TabPanel>
        </Validations>
        <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
        <TabPanel Name="step3" style="margin: 7px; margin-top: 11px;">
            <h4>Pytanie 3</h4>
            <hr />
            <p>Lorem ipsum bla bla vla kons hba asdf sdf.</p>
            <Validation Validator="@ValidationRule.IsSelected">
            <Select TValue="int" Width="Width.Is75" SelectedValueChanged="@OnSelectedValueChanged3">
                <SelectItem Value="0">Wybierz osobe</SelectItem>
                @foreach(StudentViewModel student in Students)
                {
                    if (student.IsChosen)
                    {
                        <SelectItem Value="@(student.Nr)"  Hidden>@(student.Name)</SelectItem>
                    }else{
                        <SelectItem Value="@(student.Nr)">@(student.Name)</SelectItem>
                    }
                }
            </Select>
            </Validation>
            <Button Color="Color.Primary" Clicked="Next3" style="float: right; margin: 5px; margin-top: 15px;">Następne pytanie</Button>
        </TabPanel>
        </Validations>
        <TabPanel Name="step4" style="margin: 7px; margin-top: 11px;">
            <h4>Koniec</h4>
            <hr />
            <p>Dziękujemy za udzielenie odpowiedzi.</p><br/>
            <Button Color="Color.Primary" Clicked="Send" Disabled="@canSend" style="float: right; margin: 5px; margin-top: 15px;">Wyślij</Button>
        </TabPanel>
    </Content>
</Tabs>
<hr />
     <Steps SelectedStep="@selectedStep" SelectedStepChanged="@OnSelectedStepChanged">
    <Items>
        <Step Name="step1">Pyt. 1</Step>
        <Step Name="step2">Pyt. 2</Step>
        <Step Name="step3">Pyt. 3</Step>
        <Step Name="step4" Color="Color.Link">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Koniec
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="step1">
        </StepPanel>
        <StepPanel Name="step2">
        </StepPanel>
        <StepPanel Name="step3">
        </StepPanel>
        <StepPanel Name="step4">
        </StepPanel>
    </Content>
    </Steps>
</Card>
@code{
    [Parameter]
    public int joinCode { get; set; }

    [Parameter]
    public int nr { get; set; }

    string selectedTab = "step1";
    string selectedStep = "step1";

    bool canSend = false;

    Validations validations;

    public List<StudentViewModel> Students = new();

    Student newStudent = new Student();

    protected override void OnInitialized()
    {
        List<StudentConst> students = quizService.GetClassS(joinCode).StudentsConst;
        foreach (StudentConst student in students)
        {
            Students.Add(new StudentViewModel { Name = student.Name, Nr = student.Nr });
        }
    }

    Task OnSelectedValueChanged1( int value )
    {
        newStudent.FirstFriend = value;
        Students.First(x => x.Nr == value).IsChosen = true;
        return Task.CompletedTask;
    }

    Task OnSelectedValueChanged2( int value )
    {
        newStudent.SecontFriend = value;
        Students.First(x => x.Nr == value).IsChosen = true;
        return Task.CompletedTask;
    }

    Task OnSelectedValueChanged3( int value )
    {
        newStudent.ThirdFriend = value;
        Students.First(x => x.Nr == value).IsChosen = true;
        return Task.CompletedTask;
    }

    private Task OnSelectedTabChanged( string name )
    {
        selectedTab = name;
        selectedStep = name;

        return Task.CompletedTask;
    }

    private Task OnSelectedStepChanged( string name )
    {
        selectedTab = name;
        selectedStep = name;

        return Task.CompletedTask;
    }

    void Next1()
    {
        selectedTab = "step2";
    }

    void Next2()
    {
        selectedTab = "step3";
    }

    void Next3()
    {
        selectedTab = "step4";
    }

    void Send()
    {
        newStudent.Nr = nr;

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var param))
        {
            newStudent.Name = param.First();
        }
        quizService.AddStudent(newStudent, joinCode);
    }

}
