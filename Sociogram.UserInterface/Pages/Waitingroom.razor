@page "/waitingroom/{joinCode:int}"
@using Sociogram.DAL.Repositiores.Interfaces
@using System.Text.Json
@using System.Text.Json.Serialization;
@inject IQuizService quizService
@inject IJSRuntime jSRuntime

<Div Style="margin-top: 100px;">
    <Div Style="float: left;">
    <Div Class="info">
        <h5>Informacje o badaniu:</h5>
        <p>
            <ol>
                <li>Nazwa klasy: <span style="font-weight: 700;"> @quiz.ClassS.Name</span></li>
                <li>Aktualnie aktywny: 
                    @if (quiz.Active)
                    {
                        <span style="color: green; font-weight: 700;">@quiz.Active</span>
                    }
                    else
                    {
                        <span style="color: red; font-weight: 700;">@quiz.Active</span>
                    }
                </li>
                <li>Badanie utworzone: <span style="font-weight: 700;"> @quiz.CreatedDate</span></li>
                <li>Dezaktywować badanie: <Button Color="Color.Danger" Style="float: right;">Dezaktywuj</Button></li>
            </ol>
        </p>
    </Div>
    <Div Class="joinCode">
        @joinCode
    </Div>
    </Div>
    <Div Class="students">
            @foreach(Student student in quiz.Students)
            {
                <Div Class="Student">
                    <Div Class="NameOfStudent">
                        @student.Name
                    </Div>
                    <Div Class="Icon">
                        <Button Color="Color.Danger">Usuń</Button>
                    </Div>
                </Div>
            }
    </Div>
    <Div Class="diagram" id="mynetwork">
    </Div>
</Div>


@code {
    [Parameter]
    public int joinCode { get; set; }

    Quiz quiz = new Quiz();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true, ReferenceHandler = ReferenceHandler.Preserve,
                WriteIndented = true};
        var students = JsonSerializer.Serialize(quiz.Students, options);
        var students2 = JsonSerializer.Serialize(quiz.ClassS.StudentsConst, options);
        await jSRuntime.InvokeVoidAsync("createDiagram", students, students2);
    }

    protected override async Task OnInitializedAsync()
    {
        quiz = quizService.GetQuizze(joinCode);
    }
}